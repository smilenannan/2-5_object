継承:
  あるクラスの特性を他のクラスが引き継ぐこと。継承される既存のクラスを
  スーバークラスと呼び、既存クラスを継承して作ったクラスをサブクラスと
  呼ぶ。
  メリット:
    似たような設計のクラスを複数書く必要がなく、コードが見やすくなる。
  デメリット:
    何度も継承を行うとかえってコードが煩雑になる。なんでもかんでも継承を
    行うとこのようになる。コードが簡潔になるように継承を行うべき。

カプセル化:
  オブジェクトの内部の構造を外部から隠し、外部に必要な機能のみを提供する
  仕組み。インスタンスメソッドなどがその機能にあたる。
  メリット:
    外部から隠蔽したい情報を隠蔽できるため、安全性が高まる。また、必要な
    機能だけを外部に提供するため。オブジェクトを簡潔に扱えやすくなる。
  デメリット:
    何を隠蔽し、どのように機能を外部に提供するのかを考えなければならない
    ので設計時間がかかる。また、内部の情報が隠蔽されるためソースが理解し
    にくくなる可能性がある。

ポリモーフィズム:
  プログラミング言語の型システムの性質を表すもので、多様性とも呼ばれる。
  スーパークラスを抽象的で本質的なクラスとして定義し、それを他のクラスが
  継承し、オーバーライドすることで各クラスが固有の性質を持つ。たとえば、
  動物クラスを猫クラス、犬クラスが継承するという例が挙げられる。猫、犬は
  動物であるため共通する性質が多々ある。そのような性質を動物クラスに記述
  する。動物クラスに鳴くという性質を記述し、猫クラスで、にゃーと鳴くとオ
  ーバーライドすることで多様性を持たせる。
  メリット:
    共通する性質を持つようなクラスを複数記述する必要がなくなる。そのため
    コードが簡潔になる。
  デメリット:
    クラスの数が無駄に増えてしまう可能性がある。また、スーパークラスの設
    計がサブクラスに継承されるため、必要な機能を洗い出してスーバークラス
    を設計する必要がある。このため設計に時間がかかる。
